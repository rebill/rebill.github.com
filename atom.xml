<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;m Rebill</title>
  <icon>https://www.gravatar.com/avatar/4416d4bf157f4176f11b32645f31fb93</icon>
  <subtitle>Rebill&#39;s Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://rebill.github.io/"/>
  <updated>2019-04-08T06:59:58.047Z</updated>
  <id>https://rebill.github.io/</id>
  
  <author>
    <name>Rebill.Ruan</name>
    <email>rebill@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用信号量实现 goroutine 并发控制</title>
    <link href="https://rebill.github.io/2019/04/08/use-semaphores-to-implement-goroutine-concurrency-control/"/>
    <id>https://rebill.github.io/2019/04/08/use-semaphores-to-implement-goroutine-concurrency-control/</id>
    <published>2019-04-08T06:41:54.000Z</published>
    <updated>2019-04-08T06:59:58.047Z</updated>
    
    <content type="html"><![CDATA[<p>示例代码：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">"context"</span></span><br><span class="line">    <span class="string">"fmt"</span></span><br><span class="line">    <span class="string">"sync"</span></span><br><span class="line">    <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"golang.org/x/sync/semaphore"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doSomething</span><span class="params">(u <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">    fmt.Println(u)</span><br><span class="line">    time.Sleep(<span class="number">2</span> * time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">    Limit  = <span class="number">3</span> <span class="comment">// 最大并发执行次数</span></span><br><span class="line">    Weight = <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    urls := []<span class="keyword">string</span>&#123;</span><br><span class="line">        <span class="string">"http://www.example.com"</span>,</span><br><span class="line">        <span class="string">"http://www.example.net"</span>,</span><br><span class="line">        <span class="string">"http://www.example.net/foo"</span>,</span><br><span class="line">        <span class="string">"http://www.example.net/bar"</span>,</span><br><span class="line">        <span class="string">"http://www.example.net/baz"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    s := semaphore.NewWeighted(Limit)</span><br><span class="line">    <span class="keyword">var</span> w sync.WaitGroup</span><br><span class="line">    <span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</span><br><span class="line">        w.Add(<span class="number">1</span>)</span><br><span class="line">        s.Acquire(context.Background(), Weight)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(u <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line">            doSomething(u)</span><br><span class="line">            s.Release(Weight)</span><br><span class="line">            w.Done()</span><br><span class="line">        &#125;(u)</span><br><span class="line">    &#125;</span><br><span class="line">    w.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;示例代码：&lt;br&gt;&lt;figure class=&quot;highlight golang&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
    
      <category term="Semaphore" scheme="https://rebill.github.io/tags/Semaphore/"/>
    
      <category term="goroutine" scheme="https://rebill.github.io/tags/goroutine/"/>
    
      <category term="concurrency control" scheme="https://rebill.github.io/tags/concurrency-control/"/>
    
  </entry>
  
  <entry>
    <title>Java大师之路（扩展篇）</title>
    <link href="https://rebill.github.io/2019/01/16/the-road-to-java-master-extend/"/>
    <id>https://rebill.github.io/2019/01/16/the-road-to-java-master-extend/</id>
    <published>2019-01-16T03:24:59.000Z</published>
    <updated>2019-04-08T06:12:09.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java大师之路（扩展篇）"><a href="#Java大师之路（扩展篇）" class="headerlink" title="Java大师之路（扩展篇）"></a>Java大师之路（扩展篇）</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="the_road_to_java_master_extend.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><a href="/2019/01/16/the-road-to-java-master-base/" title="Java大师之路（基础篇）">Java大师之路（基础篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-advanced/" title="Java大师之路（进阶篇）">Java大师之路（进阶篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-senior/" title="Java大师之路（高级篇）">Java大师之路（高级篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-architecture/" title="Java大师之路（架构篇）">Java大师之路（架构篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-extend/" title="Java大师之路（扩展篇）">Java大师之路（扩展篇）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java大师之路（扩展篇）&quot;&gt;&lt;a href=&quot;#Java大师之路（扩展篇）&quot; class=&quot;headerlink&quot; title=&quot;Java大师之路（扩展篇）&quot;&gt;&lt;/a&gt;Java大师之路（扩展篇）&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java大师之路（架构篇）</title>
    <link href="https://rebill.github.io/2019/01/16/the-road-to-java-master-architecture/"/>
    <id>https://rebill.github.io/2019/01/16/the-road-to-java-master-architecture/</id>
    <published>2019-01-16T03:24:12.000Z</published>
    <updated>2019-04-08T06:12:09.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java大师之路（架构篇）"><a href="#Java大师之路（架构篇）" class="headerlink" title="Java大师之路（架构篇）"></a>Java大师之路（架构篇）</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="the_road_to_java_master_architecture.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><a href="/2019/01/16/the-road-to-java-master-base/" title="Java大师之路（基础篇）">Java大师之路（基础篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-advanced/" title="Java大师之路（进阶篇）">Java大师之路（进阶篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-senior/" title="Java大师之路（高级篇）">Java大师之路（高级篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-architecture/" title="Java大师之路（架构篇）">Java大师之路（架构篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-extend/" title="Java大师之路（扩展篇）">Java大师之路（扩展篇）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java大师之路（架构篇）&quot;&gt;&lt;a href=&quot;#Java大师之路（架构篇）&quot; class=&quot;headerlink&quot; title=&quot;Java大师之路（架构篇）&quot;&gt;&lt;/a&gt;Java大师之路（架构篇）&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java大师之路（高级篇）</title>
    <link href="https://rebill.github.io/2019/01/16/the-road-to-java-master-senior/"/>
    <id>https://rebill.github.io/2019/01/16/the-road-to-java-master-senior/</id>
    <published>2019-01-16T03:23:58.000Z</published>
    <updated>2019-04-08T06:12:09.430Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java大师之路（高级篇）"><a href="#Java大师之路（高级篇）" class="headerlink" title="Java大师之路（高级篇）"></a>Java大师之路（高级篇）</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="the_road_to_java_master_senior.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><a href="/2019/01/16/the-road-to-java-master-base/" title="Java大师之路（基础篇）">Java大师之路（基础篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-advanced/" title="Java大师之路（进阶篇）">Java大师之路（进阶篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-senior/" title="Java大师之路（高级篇）">Java大师之路（高级篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-architecture/" title="Java大师之路（架构篇）">Java大师之路（架构篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-extend/" title="Java大师之路（扩展篇）">Java大师之路（扩展篇）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java大师之路（高级篇）&quot;&gt;&lt;a href=&quot;#Java大师之路（高级篇）&quot; class=&quot;headerlink&quot; title=&quot;Java大师之路（高级篇）&quot;&gt;&lt;/a&gt;Java大师之路（高级篇）&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java大师之路（进阶篇）</title>
    <link href="https://rebill.github.io/2019/01/16/the-road-to-java-master-advanced/"/>
    <id>https://rebill.github.io/2019/01/16/the-road-to-java-master-advanced/</id>
    <published>2019-01-16T03:20:54.000Z</published>
    <updated>2019-04-08T06:12:09.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java大师之路（进阶篇）"><a href="#Java大师之路（进阶篇）" class="headerlink" title="Java大师之路（进阶篇）"></a>Java大师之路（进阶篇）</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="the_road_to_java_master_advanced.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><a href="/2019/01/16/the-road-to-java-master-base/" title="Java大师之路（基础篇）">Java大师之路（基础篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-advanced/" title="Java大师之路（进阶篇）">Java大师之路（进阶篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-senior/" title="Java大师之路（高级篇）">Java大师之路（高级篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-architecture/" title="Java大师之路（架构篇）">Java大师之路（架构篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-extend/" title="Java大师之路（扩展篇）">Java大师之路（扩展篇）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java大师之路（进阶篇）&quot;&gt;&lt;a href=&quot;#Java大师之路（进阶篇）&quot; class=&quot;headerlink&quot; title=&quot;Java大师之路（进阶篇）&quot;&gt;&lt;/a&gt;Java大师之路（进阶篇）&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java大师之路（基础篇）</title>
    <link href="https://rebill.github.io/2019/01/16/the-road-to-java-master-base/"/>
    <id>https://rebill.github.io/2019/01/16/the-road-to-java-master-base/</id>
    <published>2019-01-16T03:20:11.000Z</published>
    <updated>2019-04-08T06:12:09.419Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java大师之路（基础篇）"><a href="#Java大师之路（基础篇）" class="headerlink" title="Java大师之路（基础篇）"></a>Java大师之路（基础篇）</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="the_road_to_java_master_base.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><a href="/2019/01/16/the-road-to-java-master-base/" title="Java大师之路（基础篇）">Java大师之路（基础篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-advanced/" title="Java大师之路（进阶篇）">Java大师之路（进阶篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-senior/" title="Java大师之路（高级篇）">Java大师之路（高级篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-architecture/" title="Java大师之路（架构篇）">Java大师之路（架构篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-extend/" title="Java大师之路（扩展篇）">Java大师之路（扩展篇）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java大师之路（基础篇）&quot;&gt;&lt;a href=&quot;#Java大师之路（基础篇）&quot; class=&quot;headerlink&quot; title=&quot;Java大师之路（基础篇）&quot;&gt;&lt;/a&gt;Java大师之路（基础篇）&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java大师之路</title>
    <link href="https://rebill.github.io/2019/01/16/the-road-to-java-master/"/>
    <id>https://rebill.github.io/2019/01/16/the-road-to-java-master/</id>
    <published>2019-01-16T02:56:06.000Z</published>
    <updated>2019-04-08T06:12:09.436Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java大师之路"><a href="#Java大师之路" class="headerlink" title="Java大师之路"></a>Java大师之路</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="the_road_to_java_master_mind.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li><a href="/2019/01/16/the-road-to-java-master-base/" title="Java大师之路（基础篇）">Java大师之路（基础篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-advanced/" title="Java大师之路（进阶篇）">Java大师之路（进阶篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-senior/" title="Java大师之路（高级篇）">Java大师之路（高级篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-architecture/" title="Java大师之路（架构篇）">Java大师之路（架构篇）</a></li><li><a href="/2019/01/16/the-road-to-java-master-extend/" title="Java大师之路（扩展篇）">Java大师之路（扩展篇）</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Java大师之路&quot;&gt;&lt;a href=&quot;#Java大师之路&quot; class=&quot;headerlink&quot; title=&quot;Java大师之路&quot;&gt;&lt;/a&gt;Java大师之路&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;di
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java 8 Optional 详解</title>
    <link href="https://rebill.github.io/2018/12/26/java-8-optional/"/>
    <id>https://rebill.github.io/2018/12/26/java-8-optional/</id>
    <published>2018-12-26T09:03:26.000Z</published>
    <updated>2019-04-08T06:12:09.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>工作中经常会有这样的一个经历：</p><p>调用一个方法获得的返回值可能为空，需要进行null判断，然后再做一些相应的业务处理，或者直接抛出NullPointerException。</p><p>为了减少这样的null值判断，java官方借鉴Google Guava类库的Optional类，在java8 中引入了一个同样名字的Optional类，官方javadoc描述如下：</p><blockquote><p>Icon<br>A container object which may or may not contain a non-null value. If a value is present, isPresent() will return true and get() will return the value.</p></blockquote><p>Optional是 java.util  的一个子类，通过以下方式引入<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br></pre></td></tr></table></figure></p><h2 id="Optional类简介"><a href="#Optional类简介" class="headerlink" title="Optional类简介"></a>Optional类简介</h2><h3 id="of"><a href="#of" class="headerlink" title="of"></a>of</h3><p><em>为非Null值创建一个Optional</em></p><p>of方法通过工厂方法创建Optional实例，需要注意的是传入的参数不能为null，否则抛出NullPointerException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给与一个非空值</span></span><br><span class="line">Optional&lt;String&gt; username = Optional.of(<span class="string">"Unknown"</span>);</span><br><span class="line"><span class="comment">// 传入参数为null，抛出NullPointerException.</span></span><br><span class="line">Optional&lt;String&gt; nullValue = Optional.of(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="ofNullable"><a href="#ofNullable" class="headerlink" title="ofNullable"></a>ofNullable</h3><p><em>为指定的值创建一个Optional，如果指定的值为null，则返回一个空的Optional。</em></p><p>可为空的Optional</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面创建了一个不包含任何值的Optional实例</span></span><br><span class="line"><span class="comment">// 输出Optional.empty</span></span><br><span class="line">Optional empty = Optional.ofNullable(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><h3 id="isPresent"><a href="#isPresent" class="headerlink" title="isPresent"></a>isPresent</h3><p><em>如果值存在返回true,否则返回false</em><br>类似下面的代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// isPresent方法用来检查Optional实例中是否包含值</span></span><br><span class="line"><span class="keyword">if</span> (username.isPresent()) &#123;</span><br><span class="line">    <span class="comment">//在Optional实例内调用get()返回已存在的值</span></span><br><span class="line">    System.out.println(username.get());      <span class="comment">//输出：Unknown</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><p><em>如果Optional有值则将其返回，否则抛出NoSuchElementException。</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行下面的代码抛出NoSuchElementException</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// 在空的Optional实例上调用get()</span></span><br><span class="line">     System.out.println(empty.get());</span><br><span class="line"> &#125; <span class="keyword">catch</span> (NoSuchElementException ex) &#123;</span><br><span class="line">     System.out.println(ex.getMessage());         <span class="comment">// 输出：No value present</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小试牛刀"><a href="#小试牛刀" class="headerlink" title="小试牛刀"></a>小试牛刀</h2><p>看语法介绍都是很枯燥的，我们来一个生动的例子。</p><p>先来看看在没有Optional之前我们的代码是怎么写的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Unknown"</span>;</span><br><span class="line">    <span class="keyword">return</span> u.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了Optional之后，你可能会把代码改成下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">    Optional&lt;User&gt; user = Optional.ofNullable(u);</span><br><span class="line">    <span class="keyword">if</span> (!user.isPresent())</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Unknown"</span>;</span><br><span class="line">    <span class="keyword">return</span> user.get().name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看上去仍然是在原地踏步，实质上是没有任何分别。</p><h2 id="更优雅Optional"><a href="#更优雅Optional" class="headerlink" title="更优雅Optional"></a>更优雅Optional</h2><p>Let me Show you the code:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getName</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(u)</span><br><span class="line">                    .map(user-&gt;user.name)</span><br><span class="line">                    .orElse(<span class="string">"Unknown"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更复杂的例子"><a href="#更复杂的例子" class="headerlink" title="更复杂的例子"></a>更复杂的例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChampionName</span><span class="params">(Competition comp)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (comp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        CompResult result = comp.getResult();</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            User champion = result.getChampion();</span><br><span class="line">            <span class="keyword">if</span> (champion != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> champion.getName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"The value of param comp isn't available."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于种种原因（比如：比赛还没有产生冠军、方法的非正常调用、某个方法的实现里埋藏的大礼包等等），我们并不能开心的一路comp.getResult().getChampion().getName()到底。</p><p>让我们看看经过Optional加持过后，这些代码会变成什么样子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getChampionName</span><span class="params">(Competition comp)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Optional.ofNullable(comp)</span><br><span class="line">            .map(c-&gt;c.getResult())</span><br><span class="line">            .map(r-&gt;r.getChampion())</span><br><span class="line">            .map(u-&gt;u.getName())</span><br><span class="line">            .orElseThrow(()-&gt;<span class="keyword">new</span> IllegalArgumentException(<span class="string">"The value of param comp isn't available."</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Optional给了我们一个真正优雅的Java风格的方法来解决null安全问题。</p><h2 id="更多神奇魅力"><a href="#更多神奇魅力" class="headerlink" title="更多神奇魅力"></a>更多神奇魅力</h2><p>为空则不打印可以这么写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string.ifPresent(System.out::println);</span><br></pre></td></tr></table></figure><p>检验参数的合法性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = Optional.ofNullable(name).filter(User::isNameValid)</span><br><span class="line">                        .orElseThrow(()-&gt;<span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid username."</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Optional类深入学习"><a href="#Optional类深入学习" class="headerlink" title="Optional类深入学习"></a>Optional类深入学习</h2><h3 id="orElse"><a href="#orElse" class="headerlink" title="orElse"></a>orElse</h3><p><em>如果有值则将其返回，否则返回指定的其它值。</em><br>如果Optional实例有值则将其返回，否则返回orElse方法传入的参数。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenOrElseWorks_thenCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String nullName = <span class="keyword">null</span>;</span><br><span class="line">    String name = Optional.ofNullable(nullName).orElse(<span class="string">"Unknown"</span>);</span><br><span class="line">    assertEquals(<span class="string">"Unknown"</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="orElseGet"><a href="#orElseGet" class="headerlink" title="orElseGet"></a>orElseGet</h3><p>orElseGet与orElse方法类似，区别在于得到的默认值。orElse方法将传入的字符串作为默认值，orElseGet方法可以接受Supplier接口的实现用来生成默认值。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenOrElseGetWorks_thenCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String nullName = <span class="keyword">null</span>;</span><br><span class="line">    String name = Optional.ofNullable(nullName).orElseGet(() -&gt; <span class="string">"Unknown"</span>);</span><br><span class="line">    assertEquals(<span class="string">"Unknown"</span>, name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p><em>如果有值，则对其执行调用mapping函数得到返回值。如果返回值不为null，则创建包含mapping返回值的Optional作为map方法返回值，否则返回空Optional。</em></p><p>map方法用来对Optional实例的值执行一系列操作。通过一组实现了Function接口的lambda表达式传入操作。map方法示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">givenOptional_whenMapWorks_thenCorrect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; companyNames = Arrays.asList(</span><br><span class="line">      <span class="string">"paypal"</span>, <span class="string">"oracle"</span>, <span class="string">""</span>, <span class="string">"microsoft"</span>, <span class="string">""</span>, <span class="string">"apple"</span>);</span><br><span class="line">    Optional&lt;List&lt;String&gt;&gt; listOptional = Optional.of(companyNames);</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> size = listOptional</span><br><span class="line">      .map(List::size)</span><br><span class="line">      .orElse(<span class="number">0</span>);</span><br><span class="line">    assertEquals(<span class="number">6</span>, size);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更多方法"><a href="#更多方法" class="headerlink" title="更多方法"></a>更多方法</h3><ul><li><strong>ifPresent</strong>  如果Optional实例有值则为其调用consumer ,否则不做处理。</li><li><strong>orElseThrow</strong>  如果有值则将其返回，否则抛出supplier接口创建的异常。</li><li><strong>flatMap</strong>  如果有值，为其执行mapping函数返回Optional类型返回值，否则返回空Optional。flatMap与map（Funtion）方法类似，区别在于flatMap中的mapper返回值必须是Optional。调用结束时，flatMap不会对结果用Optional封装。</li><li><strong>filter</strong>  filter个方法通过传入限定条件对Optional实例的值进行过滤。如果有值并且满足断言条件返回包含该值的Optional，否则返回空Optional。</li></ul><p>不再一一介绍。</p><p>JDK 9 又新增了几个API</p><ul><li>the <strong>or()</strong> method for providing a supplier that creates an alternative Optional</li><li>the <strong>ifPresentOrElse()</strong> method that allows executing an action if the Optional is present or another action if not</li><li><strong>stream()</strong> method for converting an Optional to a Stream</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用 Optional 时尽量不直接调用 Optional.<strong>get()</strong> 方法，Optional.<strong>isPresent()</strong> 更应该被视为一个私有方法，应依赖于其他像 Optional.<strong>orElse()</strong>、Optional.<strong>orElseGet()</strong>、Optional.<strong>map()</strong> 等这样的方法。</p><p>最好的理解 Java 8 Optional 的方法莫过于看它的源代码 <a href="http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/util/Optional.java" target="_blank" rel="noopener">java.util.Optional</a>，阅读了源代码才能真真正正的让你解释起来最有底气，Optional 的方法中基本都是内部调用  isPresent() 判断，真时处理值, 假时什么也不做。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://juejin.im/entry/5ae6b732f265da0b7f44548f" target="_blank" rel="noopener">Java8 Optional 详解</a></li><li><a href="http://www.importnew.com/26066.html" target="_blank" rel="noopener">Java8 如何正确使用 Optional</a></li><li><a href="https://www.baeldung.com/java-optional" target="_blank" rel="noopener">Guide To Java 8 Optional</a></li><li><a href="http://www.importnew.com/22060.html" target="_blank" rel="noopener">使用 Java8 Optional 的正确姿势</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;工作中经常会有这样的一个经历：&lt;/p&gt;
&lt;p&gt;调用一个方法获得的返回值可能为空，需要进行null判断，然后再做一些相应的业务处理，或者直接抛
      
    
    </summary>
    
    
      <category term="Java" scheme="https://rebill.github.io/tags/Java/"/>
    
      <category term="Optional" scheme="https://rebill.github.io/tags/Optional/"/>
    
  </entry>
  
</feed>
